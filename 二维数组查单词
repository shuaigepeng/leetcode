class Solution {
    public boolean exist(char[][] board, String word) {
        if(board==null||board.length==0) return false;
        //用一个数组表示某个位置上的元素是否已经使用过
        int m=board.length;
        int n=board[0].length;
        boolean[] flag=new boolean[m*n];
        //从每个位置开始遍历看是否包含此字符串。
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++){
                if(helper(board,word,i,j,flag,0)) return true;
            }
        return false;
    }
    public boolean helper(char[][] board,String word,int i,int j,boolean[] flag,int index){
        // 当index大于Word的最后一个位置，也就是前面匹配都成功了，可以返回true。
        if(index==word.length()) return true;
        if(i<0||i>=board.length||j<0||j>=board[0].length||board[i][j]!=word.charAt(index)||flag[i*board[0].length+j]) return false;
        //符合要求后，表示当前字符与字符串中对应字符相等，将该字符标记为使用过，再去判断剩下的字符。
        flag[i*board[0].length+j]=true;
        if(helper(board,word,i+1,j,flag,index+1)||helper(board,word,i-1,j,flag,index+1)
                ||helper(board,word,i,j-1,flag,index+1)||helper(board,word,i,j+1,flag,index+1))
            return true;
        // 这里是关键，如果后面不匹配，就得把该位置的标志清除了，然后返回进行其他位置的比对，不清除会影响结果。
        // 如果后面的不匹配，就得把当前的标志清除返回。
        flag[i*board[0].length+j]=false;
        return false;
    }

    public static void main(String[] args) {
        char[][] broad = {{'A','B','C','E'}, {'S','F','C','S'}, {'A','D','E','E'}};
        String word1 = "ABCCED";
        String word2 = "SEE";
        String word3 = "ABCB";
        System.out.println(new Solution().exist(broad, word1));
    }
}
